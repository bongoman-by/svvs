var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.672,1,1.672]],["body/controllers/AppController.html",[0,2.947,1,2.549,2,2.751,3,0.715,4,0.618,5,0.618,6,2.751,7,0.715,8,4.314,9,3.245,10,3.493,11,0.715,12,1.527,13,4.987,14,2.007,15,0.049,16,1.062,17,3.397,18,1.482,19,4.74,20,2.152,21,1.203,22,3.493,23,0.715,24,0.82,25,0.715,26,0.364,27,0.029,28,0.037,29,0.029]],["title/modules/AppModule.html",[30,1.285,31,1.672]],["body/modules/AppModule.html",[1,2.585,2,3.136,3,0.606,4,0.524,5,0.524,15,0.049,23,1.114,24,0.696,25,0.606,26,0.309,27,0.025,28,0.033,29,0.025,30,1.758,31,3.086,32,1.308,33,1.758,34,2.332,35,2.332,36,2.595,37,2.282,38,2.288,39,1.702,40,1.487,41,2.88,42,2.651,43,2.88,44,1.487,45,2.88,46,2.332,47,1.702,48,1.702,49,1.702,50,2.651,51,2.88,52,1.371,53,2.332,54,2.332,55,2.88,56,2.88,57,2.88,58,2.88,59,2.88,60,2.88,61,1.702,62,1.971,63,3.872,64,2.88,65,1.971,66,2.88]],["title/modules/AuthModule.html",[30,1.285,36,1.461]],["body/modules/AuthModule.html",[3,0.548,4,0.474,5,0.474,7,0.548,15,0.049,23,1.09,24,0.629,25,0.548,26,0.279,27,0.022,28,0.031,29,0.022,30,2.037,32,1.183,33,1.642,36,2.779,37,2.214,38,2.137,39,1.539,40,1.345,42,2.475,48,1.539,49,1.539,54,2.11,67,2.11,68,2.11,69,2.605,70,2.11,71,2.426,72,2.518,73,2.214,74,2.605,75,3.616,76,2.928,77,2.475,78,3.616,79,2.928,80,2.928,81,3.616,82,1.539,83,2.605,84,1.783,85,2.11,86,2.605,87,2.605,88,2.137,89,2.605,90,2.605,91,2.605,92,1.539,93,2.605,94,2.605,95,2.11,96,2.605,97,2.11,98,2.605]],["title/classes/AuthResolver.html",[26,0.303,88,1.672]],["body/classes/AuthResolver.html",[3,0.499,4,0.431,5,0.431,7,0.831,11,0.499,12,1.199,14,2,15,0.049,16,1.234,18,1.346,21,1.199,23,0.906,25,0.499,26,0.254,27,0.02,28,0.029,29,0.02,44,1.224,61,2.543,65,1.624,71,2.301,85,1.921,88,2.796,99,1.402,100,1.921,101,2.741,102,3.385,103,3.944,104,2.443,105,3.686,106,4.732,107,1.224,108,2.372,109,2.372,110,2,111,1.199,112,1.058,113,0.953,114,1.199,115,2.317,116,1.537,117,2.741,118,1.921,119,3.485,120,3.385,121,2.372,122,3.485,123,3.196,124,3.385,125,3.385,126,2,127,2.741,128,3.385,129,2.543,130,3.385,131,2.372,132,1.921,133,1.921,134,1.624,135,2.317,136,2.372,137,2.372,138,1.356,139,1.921,140,1.402,141,1.402,142,2.372]],["title/injectables/AuthService.html",[71,1.285,143,0.684]],["body/injectables/AuthService.html",[3,0.386,4,0.333,5,0.333,7,0.714,11,0.386,12,0.991,15,0.049,16,1.061,18,1.402,20,1.957,21,0.991,23,0.944,24,0.443,25,0.386,26,0.196,27,0.016,28,0.024,29,0.016,48,1.083,49,1.083,52,0.649,53,1.484,71,1.957,73,2.194,84,1.255,92,1.653,97,1.484,104,2.225,105,3.075,107,1.444,110,1.653,111,1.202,112,1.061,113,0.82,114,1.202,115,2.599,116,2.151,117,3.075,118,2.266,119,3.075,123,2.266,126,2.244,129,2.244,133,1.484,134,1.255,138,1.727,140,2.005,141,2.005,143,0.676,144,0.832,145,1.484,146,3.394,147,1.833,148,4.738,149,1.937,150,1.833,151,2.951,152,3.491,153,1.915,154,1.915,155,2.266,156,1.653,157,1.833,158,2.798,159,1.833,160,3.798,161,1.833,162,1.915,163,1.96,164,2.798,165,1.833,166,1.833,167,2.323,168,2.244,169,1.833,170,2.798,171,1.833,172,2.798,173,1.484,174,1.484,175,1.255,176,1.833,177,1.833,178,1.833,179,1.833,180,1.444,181,1.484,182,1.833,183,1.484,184,2.798,185,1.833,186,1.833,187,1.833,188,1.255]],["title/injectables/GqlAuthGuard.html",[143,0.684,189,1.672]],["body/injectables/GqlAuthGuard.html",[3,0.642,4,0.555,5,0.555,7,0.642,11,0.642,12,1.425,15,0.049,16,0.954,18,1.408,21,1.08,23,0.948,24,0.737,25,0.642,26,0.327,27,0.026,28,0.034,29,0.026,44,1.575,62,2.754,82,1.803,111,1.08,112,0.954,113,0.737,114,1.08,138,1.222,143,0.972,144,1.385,168,1.803,189,2.829,190,3.258,191,2.47,192,4.024,193,4.976,194,3.877,195,4.024,196,4.787,197,4.024,198,4.138,199,3.051,200,3.051,201,2.47,202,3.051,203,2.47,204,3.051,205,3.051]],["title/injectables/JwtStrategy.html",[72,1.461,143,0.684]],["body/injectables/JwtStrategy.html",[3,0.572,4,0.495,5,0.495,7,0.572,11,0.572,12,1.618,15,0.049,16,1.165,18,1.497,21,0.963,23,0.962,24,0.657,25,0.572,26,0.291,27,0.023,28,0.032,29,0.023,48,1.607,49,1.607,72,1.923,82,1.607,92,2.51,95,2.202,104,2.193,107,2.193,111,0.963,112,0.85,113,0.657,114,0.963,115,3.383,126,2.7,138,1.09,143,0.9,144,1.235,151,2.55,152,3.016,163,1.404,173,2.202,181,3.016,183,2.202,201,2.202,206,2.202,207,3.725,208,3.44,209,2.72,210,2.55,211,4.248,212,3.725,213,2.72,214,1.862,215,2.72,216,2.72,217,2.72,218,2.72,219,2.72,220,2.72,221,2.72,222,2.72,223,2.72,224,2.72,225,2.72,226,2.202,227,2.72,228,2.72,229,2.72,230,2.72,231,2.72]],["title/injectables/PasswordService.html",[73,1.285,143,0.684]],["body/injectables/PasswordService.html",[3,0.519,4,0.449,5,0.449,7,0.849,11,0.519,12,1.551,15,0.049,16,1.261,18,1.37,20,2.322,21,1.232,23,0.733,24,0.596,25,0.519,26,0.264,27,0.021,28,0.03,29,0.021,73,1.58,111,1.232,112,1.088,113,0.974,114,1.232,129,2.588,138,1.616,143,0.841,144,1.12,154,2.76,155,3.741,156,3.211,167,2.76,210,2.382,232,1.997,233,2.818,234,4.033,235,3.48,236,3.48,237,3.48,238,4.619,239,2.467,240,4.794,241,3.989,242,3.48,243,2.467,244,1.688,245,1.688,246,1.688,247,3.48,248,2.467,249,3.48,250,3.48,251,2.467,252,2.467,253,2.467,254,2.467,255,2.467]],["title/classes/UserEntity.html",[26,0.303,52,1.002]],["body/classes/UserEntity.html",[3,0.394,4,0.34,5,0.34,7,0.723,11,0.394,14,2.749,15,0.049,16,1.455,20,2.324,23,0.598,25,0.394,26,0.2,27,0.016,28,0.024,29,0.016,52,1.006,65,2.626,99,1.105,112,0.585,113,1.151,114,1.647,116,2.324,127,2.301,134,1.28,151,1.945,153,2.626,156,2.438,162,2.824,163,2.46,188,2.824,210,1.945,233,2.301,244,1.945,245,1.945,246,1.945,256,1.514,257,2.841,258,2.301,259,3.435,260,3.435,261,3.435,262,4.126,263,4.126,264,3.435,265,3.435,266,1.87,267,2.841,268,3.107,269,4.345,270,4.859,271,1.87,272,2.841,273,2.841,274,2.841,275,2.841,276,4.652,277,2.841,278,3.435,279,1.87,280,2.301,281,1.87,282,2.841,283,3.837,284,2.841,285,1.87,286,1.87,287,3.435,288,1.87,289,2.841,290,1.87,291,2.841,292,1.87,293,1.28,294,1.87]],["title/classes/UserResolver.html",[26,0.303,295,1.672]],["body/classes/UserResolver.html",[3,0.536,4,0.463,5,0.463,7,0.864,11,0.536,12,1.261,14,1.506,15,0.049,16,1.113,18,0.797,21,0.902,23,1.02,24,0.615,25,0.536,26,0.273,27,0.022,28,0.03,29,0.022,44,1.315,52,1.573,61,2.104,99,1.506,101,2.883,103,3.786,104,2.119,107,1.315,110,2.104,111,1.261,112,1.113,113,0.86,114,1.261,116,2.339,122,2.883,132,2.063,138,1.427,139,2.063,140,1.506,141,1.506,149,2.065,189,1.506,214,1.744,295,2.862,296,2.063,297,3.56,298,3.56,299,2.548,300,2.548,301,2.437,302,3.598,303,2.548,304,2.548,305,2.548,306,2.883,307,2.883,308,3.56,309,2.548,310,1.744,311,2.548,312,1.744,313,2.548,314,2.548,315,2.063,316,2.548,317,2.548,318,2.548,319,2.548,320,2.548]],["title/injectables/UserService.html",[143,0.684,149,1.134]],["body/injectables/UserService.html",[3,0.378,4,0.327,5,0.327,7,0.58,11,0.378,12,0.976,15,0.049,16,1.338,18,1.175,20,1.522,21,1.436,23,0.791,24,0.434,25,0.378,26,0.193,27,0.015,28,0.024,29,0.015,47,1.062,52,0.637,104,2.646,107,1.423,110,1.629,111,1.436,112,1.268,113,0.979,114,1.436,116,2.306,129,2.842,138,1.625,140,1.062,141,2.221,143,0.666,144,0.816,149,1.714,162,2.295,163,2.093,167,1.23,168,1.629,174,2.232,175,1.887,180,1.94,188,3.225,244,2.928,293,1.23,301,3.397,302,4.27,306,2.232,307,2.232,312,1.23,321,1.456,322,3.044,323,2.756,324,2.756,325,2.756,326,2.756,327,1.798,328,3.759,329,1.798,330,2.756,331,3.353,332,1.798,333,2.756,334,1.798,335,1.798,336,2.756,337,1.798,338,2.756,339,1.798,340,1.798,341,1.798,342,2.756,343,1.798,344,1.798,345,1.23,346,1.798,347,1.798,348,1.798,349,1.798,350,1.798]],["title/modules/UsersModule.html",[30,1.285,37,1.285]],["body/modules/UsersModule.html",[3,0.657,4,0.568,5,0.568,7,0.657,15,0.048,23,1.055,24,0.754,25,0.657,26,0.334,27,0.027,28,0.035,29,0.027,30,2.193,32,1.418,33,1.855,37,2.379,38,2.414,39,1.845,40,1.612,42,2.137,46,2.528,47,1.845,52,1.106,76,3.309,77,2.797,79,3.309,80,3.309,116,2.193,149,2.204,153,2.797,295,2.414,312,2.137,315,2.528,351,2.528,352,2.528,353,2.528,354,3.122,355,3.122,356,3.122]],["title/contributing.html",[357,1.63,358,1.63,359,2.381]],["body/contributing.html",[4,0.363,15,0.038,22,1.619,27,0.017,28,0.026,29,0.017,77,1.368,111,0.708,180,1.032,194,2.419,226,1.619,241,1.619,301,1.368,322,1.619,345,2.045,360,1.999,361,1.999,362,1.999,363,1.999,364,3.577,365,2.987,366,1.999,367,1.999,368,2.987,369,1.999,370,2.987,371,2.987,372,1.999,373,1.999,374,1.999,375,2.987,376,3.968,377,1.999,378,1.999,379,1.999,380,1.999,381,1.999,382,1.999,383,1.999,384,1.999,385,1.999,386,1.999,387,1.999,388,1.999,389,1.999,390,2.987,391,1.999,392,1.999,393,1.999,394,2.987,395,1.999,396,1.999,397,1.999,398,3.968,399,1.999,400,1.999,401,1.999,402,1.999,403,1.999,404,1.999,405,1.999,406,1.999,407,1.999,408,1.999,409,1.999,410,1.999,411,1.999,412,1.999,413,1.999,414,1.999,415,1.999,416,3.577,417,3.577,418,3.577,419,2.987,420,3.577,421,1.999,422,3.577,423,2.419,424,1.999,425,3.577,426,2.987,427,1.999,428,1.999,429,2.987,430,2.987,431,1.999,432,2.987,433,1.999,434,1.999,435,3.439,436,3.439,437,1.999,438,1.368,439,1.999,440,1.999,441,2.987,442,1.999,443,3.577,444,1.999,445,2.987,446,1.999,447,2.987,448,1.999,449,1.999,450,3.577,451,1.999,452,1.999,453,1.999,454,1.999,455,1.999,456,2.987,457,1.999,458,1.999,459,1.999,460,1.999,461,1.999,462,1.999,463,1.999,464,1.999,465,1.999,466,1.999,467,1.999,468,1.999,469,1.999,470,1.999,471,2.987,472,1.999,473,2.987,474,1.999,475,1.999,476,1.999,477,2.987,478,1.999,479,1.999,480,1.999,481,1.999,482,1.999,483,1.999,484,1.999,485,1.999,486,1.999,487,1.619,488,1.999,489,2.987,490,1.999,491,1.999,492,1.999,493,1.999,494,1.999,495,1.619,496,1.999,497,1.999,498,1.999,499,1.999,500,1.999,501,1.999,502,1.999,503,1.999,504,1.999,505,1.999,506,1.999,507,1.999,508,1.999,509,1.999,510,1.999,511,1.999,512,1.999,513,1.999,514,3.577,515,2.987,516,2.987,517,2.987,518,1.999,519,1.999,520,1.999,521,1.999,522,2.987,523,2.987,524,1.999,525,1.999,526,1.999,527,1.999,528,1.999,529,1.999,530,1.999,531,1.999,532,1.999,533,1.999,534,1.999,535,1.999,536,1.999]],["title/coverage.html",[438,2.62]],["body/coverage.html",[0,1.839,1,1.839,5,0.566,6,2.52,15,0.048,26,0.487,27,0.027,28,0.035,29,0.027,50,2.13,52,1.102,71,1.413,72,1.606,73,1.413,88,1.839,100,2.52,113,0.752,135,2.13,143,1.21,145,2.52,149,1.247,180,1.606,189,1.839,190,2.52,191,2.52,206,2.52,232,2.52,256,2.52,258,2.52,280,2.52,295,1.839,296,2.52,310,2.13,321,2.52,438,2.13,537,2.52,538,3.112,539,5.526,540,4.077,541,2.52,542,4.546,543,4.824,544,2.52,545,4.546,546,4.077,547,2.52,548,3.112,549,3.112,550,2.52,551,3.112,552,2.13,553,3.112]],["title/dependencies.html",[33,1.541,554,2.381]],["body/dependencies.html",[15,0.049,24,0.619,27,0.022,28,0.031,29,0.022,33,1.163,44,1.322,47,1.514,61,2.432,82,1.514,84,1.754,92,1.514,113,0.619,154,1.754,208,2.894,293,1.754,552,2.446,555,2.562,556,4.116,557,2.562,558,2.562,559,5.281,560,2.562,561,2.562,562,2.562,563,2.562,564,2.562,565,4.116,566,2.894,567,2.562,568,3.574,569,2.562,570,2.562,571,2.562,572,4.116,573,2.562,574,2.562,575,2.562,576,2.562,577,2.562,578,3.333,579,2.562,580,2.562,581,2.562,582,2.562,583,2.562,584,3.574,585,2.562,586,4.116,587,2.562,588,2.562,589,2.562,590,2.562,591,2.562,592,2.562,593,2.562,594,2.562,595,3.574,596,2.562,597,2.562,598,2.562,599,2.562,600,2.562,601,2.562,602,2.562,603,2.562,604,2.562,605,2.562,606,2.075,607,2.562,608,2.562,609,2.562,610,2.562,611,2.562,612,2.562,613,2.562,614,2.562,615,2.562,616,2.562,617,2.562,618,2.562,619,2.562,620,2.562,621,2.562]],["title/miscellaneous/functions.html",[622,1.407,623,2.749]],["body/miscellaneous/functions.html",[9,2.859,10,3.382,11,0.879,15,0.042,27,0.036,28,0.042,29,0.036,550,3.382,552,3.664,622,2.468,623,3.382,624,4.177,625,4.177]],["title/index.html",[11,0.501,357,1.63,358,1.63]],["body/index.html",[9,2.966,15,0.047,27,0.037,28,0.043,29,0.037]],["title/license.html",[357,1.63,358,1.63,626,1.928]],["body/license.html",[15,0.035,27,0.026,28,0.035,29,0.026,40,1.585,436,3.272,495,4.339,537,2.487,578,2.487,626,2.487,627,3.071,628,4.517,629,3.071,630,3.071,631,3.071,632,4.041,633,3.071,634,3.071,635,3.071,636,3.071,637,3.071,638,3.071,639,4.041,640,3.071,641,3.071,642,3.071,643,4.517,644,3.071,645,4.041,646,3.071,647,3.071,648,3.071,649,3.071,650,3.071,651,3.071,652,3.071,653,3.071,654,3.071,655,4.041,656,3.071,657,3.071,658,3.071,659,3.071,660,3.071,661,3.071,662,3.071,663,4.041,664,4.041,665,3.071,666,3.071,667,3.071,668,3.071,669,3.071,670,3.071,671,3.071,672,3.071,673,3.071,674,3.071,675,3.071,676,3.071,677,3.071,678,3.071,679,3.071,680,3.071,681,3.071,682,3.071,683,3.071,684,3.071,685,3.071,686,3.071,687,3.071,688,3.071,689,3.071,690,3.071,691,3.071,692,3.071,693,3.071]],["title/modules.html",[32,1.738]],["body/modules.html",[15,0.041,27,0.035,28,0.041,29,0.035,31,2.424,32,1.863,36,2.118,37,1.863,566,4.172,694,5.152,695,5.152,696,5.152]],["title/overview.html",[697,3.099]],["body/overview.html",[0,1.909,15,0.047,27,0.028,28,0.036,29,0.028,31,3.068,32,1.467,33,1.897,34,2.617,35,2.617,36,2.853,37,2.398,38,2.469,39,1.909,40,1.668,67,2.617,68,2.617,70,2.617,71,2.398,72,2.39,73,2.102,99,1.909,144,1.467,149,2.117,345,2.212,351,2.617,352,2.617,353,2.617,487,3.383,697,2.617,698,3.231]],["title/miscellaneous/variables.html",[622,1.407,699,2.749]],["body/miscellaneous/variables.html",[7,0.583,11,0.583,15,0.049,18,1.554,20,1.712,27,0.024,28,0.032,29,0.024,50,2.581,62,1.895,112,0.866,113,1.036,126,2.228,135,2.581,156,2.228,163,1.946,168,1.636,175,1.895,180,2.213,198,3.728,203,3.472,214,2.581,245,2.935,246,3.401,268,3.9,310,2.581,423,2.242,435,2.242,541,2.242,544,2.242,547,2.242,606,3.053,622,1.636,699,2.242,700,2.768,701,2.768,702,2.768,703,3.77,704,2.768,705,2.768,706,2.768,707,2.768,708,3.77,709,2.768,710,2.768,711,3.77,712,2.768,713,2.768,714,2.768,715,2.768,716,2.768,717,2.768,718,2.768,719,2.768,720,2.768,721,2.768,722,2.768,723,2.768,724,2.768,725,2.768,726,2.768]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["0.2.34",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":345,"title":{},"body":{"injectables/UserService.html":{},"contributing.html":{},"overview.html":{}}}],["1,2,3",{"_index":488,"title":{},"body":{"contributing.html":{}}}],["1/1",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":247,"title":{},"body":{"injectables/PasswordService.html":{}}}],["100",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["10k",{"_index":387,"title":{},"body":{"contributing.html":{}}}],["12.0.0",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["12.0.2",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["12.1.0",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["12.2.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["12.4.0",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["15.5.1",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":486,"title":{},"body":{"contributing.html":{}}}],["2.0.0",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["2.25.2",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":630,"title":{},"body":{"license.html":{}}}],["3",{"_index":487,"title":{},"body":{"contributing.html":{},"overview.html":{}}}],["3.3.21",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["4.15.2",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":698,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":291,"title":{},"body":{"classes/UserEntity.html":{}}}],["6.6.0",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["7.0.5",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["7.1.6",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["7.11.0",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["8.6.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["9.1.3",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":662,"title":{},"body":{"license.html":{}}}],["access",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["accesstoken",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":687,"title":{},"body":{"license.html":{}}}],["alone",{"_index":506,"title":{},"body":{"contributing.html":{}}}],["already",{"_index":374,"title":{},"body":{"contributing.html":{}}}],["always",{"_index":435,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":653,"title":{},"body":{"license.html":{}}}],["angular",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["apollo",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["apollo/client",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":31,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":624,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app/app.controller.ts:11",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app/app.module.ts",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app/app.resolver.ts",{"_index":541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app/auth/auth.module.ts",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/app/auth/decorators/auth.decorator.ts",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":100,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/resolvers/auth.resolver.ts:15",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/api/src/app/auth/resolvers/auth.resolver.ts:29",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/api/src/app/auth/resolvers/auth.resolver.ts:39",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/api/src/app/auth/services/auth.service.ts",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/services/auth.service.ts:18",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/services/auth.service.ts:38",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/services/auth.service.ts:61",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/services/jwt.strategy.ts",{"_index":206,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/services/jwt.strategy.ts:12",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/app/auth/services/jwt.strategy.ts:29",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/app/auth/services/password.service.ts",{"_index":232,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/services/password.service.ts:13",{"_index":248,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/api/src/app/auth/services/password.service.ts:19",{"_index":243,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/api/src/app/auth/services/password.service.ts:28",{"_index":239,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/api/src/app/users/decorators/user.decorator.ts",{"_index":547,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts",{"_index":256,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:20",{"_index":279,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:25",{"_index":266,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:30",{"_index":288,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:39",{"_index":271,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:45",{"_index":286,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:50",{"_index":285,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:59",{"_index":292,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/entities/user.entity.ts:68",{"_index":281,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/api/src/app/users/guards/gql.auth",{"_index":190,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/app/users/resolvers/user.resolvers.ts",{"_index":296,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/api/src/app/users/resolvers/user.resolvers.ts:12",{"_index":300,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/api/src/app/users/resolvers/user.resolvers.ts:26",{"_index":305,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/api/src/app/users/services/user.service.ts",{"_index":321,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/api/src/app/users/services/user.service.ts:10",{"_index":329,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/services/user.service.ts:23",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/services/user.service.ts:31",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/services/user.service.ts:39",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/services/user.service.ts:48",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/services/user.service.ts:57",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/users/users.module.ts",{"_index":354,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/main.ts",{"_index":550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["args",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":691,"title":{},"body":{"license.html":{}}}],["around",{"_index":489,"title":{},"body":{"contributing.html":{}}}],["arrows",{"_index":493,"title":{},"body":{"contributing.html":{}}}],["associated",{"_index":640,"title":{},"body":{"license.html":{}}}],["ast",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["atomic",{"_index":446,"title":{},"body":{"contributing.html":{}}}],["auth",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.graphql",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{}}}],["auth/auth.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["authguard",{"_index":200,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":202,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":36,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":680,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":88,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":71,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autogenerate",{"_index":269,"title":{},"body":{"classes/UserEntity.html":{}}}],["avoid",{"_index":478,"title":{},"body":{"contributing.html":{}}}],["await",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":625,"title":{},"body":{"miscellaneous/functions.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["below",{"_index":442,"title":{},"body":{"contributing.html":{}}}],["beta3",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["bigger",{"_index":455,"title":{},"body":{"contributing.html":{}}}],["bongoman",{"_index":631,"title":{},"body":{"license.html":{}}}],["bootstrap",{"_index":552,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["bootstrap/ng",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["brief",{"_index":459,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":696,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":566,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bugs",{"_index":401,"title":{},"body":{"contributing.html":{}}}],["business",{"_index":408,"title":{},"body":{"contributing.html":{}}}],["c",{"_index":629,"title":{},"body":{"license.html":{}}}],["candidate",{"_index":307,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["car",{"_index":502,"title":{},"body":{"contributing.html":{}}}],["carl",{"_index":532,"title":{},"body":{"contributing.html":{}}}],["cdn",{"_index":515,"title":{},"body":{"contributing.html":{}}}],["changed",{"_index":463,"title":{},"body":{"contributing.html":{}}}],["changes",{"_index":422,"title":{},"body":{"contributing.html":{}}}],["channel",{"_index":405,"title":{},"body":{"contributing.html":{}}}],["charge",{"_index":636,"title":{},"body":{"license.html":{}}}],["chat.freenode.net",{"_index":404,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":683,"title":{},"body":{"license.html":{}}}],["class",{"_index":26,"title":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":99,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["clear",{"_index":426,"title":{},"body":{"contributing.html":{}}}],["client",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":351,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":352,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":353,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":420,"title":{},"body":{"contributing.html":{}}}],["coding",{"_index":440,"title":{},"body":{"contributing.html":{}}}],["column",{"_index":270,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({length",{"_index":290,"title":{},"body":{"classes/UserEntity.html":{}}}],["come",{"_index":371,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":450,"title":{},"body":{"contributing.html":{}}}],["commits",{"_index":445,"title":{},"body":{"contributing.html":{}}}],["compare",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["compare(password",{"_index":255,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":235,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":237,"title":{},"body":{"injectables/PasswordService.html":{}}}],["conditions",{"_index":661,"title":{},"body":{"license.html":{}}}],["connection",{"_index":692,"title":{},"body":{"license.html":{}}}],["consider",{"_index":496,"title":{},"body":{"contributing.html":{}}}],["consistently",{"_index":512,"title":{},"body":{"contributing.html":{}}}],["consists",{"_index":415,"title":{},"body":{"contributing.html":{}}}],["const",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":327,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":299,"title":{},"body":{"classes/UserResolver.html":{}}}],["contain",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["context",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":688,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":360,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":359,"title":{"contributing.html":{}},"body":{}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["conventions",{"_index":441,"title":{},"body":{"contributing.html":{}}}],["copies",{"_index":655,"title":{},"body":{"license.html":{}}}],["copy",{"_index":639,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":628,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":438,"title":{"coverage.html":{}},"body":{"contributing.html":{},"coverage.html":{}}}],["create",{"_index":322,"title":{},"body":{"injectables/UserService.html":{},"contributing.html":{}}}],["created",{"_index":260,"title":{},"body":{"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":265,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":323,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["creation",{"_index":267,"title":{},"body":{"classes/UserEntity.html":{}}}],["css",{"_index":527,"title":{},"body":{"contributing.html":{}}}],["ctx",{"_index":203,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":205,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["cucumber",{"_index":412,"title":{},"body":{"contributing.html":{}}}],["currentuser",{"_index":310,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cwd",{"_index":521,"title":{},"body":{"contributing.html":{}}}],["damages",{"_index":684,"title":{},"body":{"license.html":{}}}],["data",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":268,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["day",{"_index":394,"title":{},"body":{"contributing.html":{}}}],["db",{"_index":257,"title":{},"body":{"classes/UserEntity.html":{}}}],["deal",{"_index":642,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":693,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":311,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":245,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["deleteuserbyid",{"_index":324,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuserbyid(id",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":33,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describing",{"_index":462,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["developer",{"_index":400,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":368,"title":{},"body":{"contributing.html":{}}}],["disable",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["distribute",{"_index":651,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":537,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doing",{"_index":504,"title":{},"body":{"contributing.html":{}}}],["done",{"_index":428,"title":{},"body":{"contributing.html":{}}}],["donuts",{"_index":505,"title":{},"body":{"contributing.html":{}}}],["driving",{"_index":501,"title":{},"body":{"contributing.html":{}}}],["during",{"_index":407,"title":{},"body":{"contributing.html":{}}}],["dynamic",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":272,"title":{},"body":{"classes/UserEntity.html":{}}}],["email",{"_index":261,"title":{},"body":{"classes/UserEntity.html":{}}}],["engine",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":312,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["environment",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.connection",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eslint/no",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["event",{"_index":679,"title":{},"body":{"license.html":{}}}],["examples",{"_index":417,"title":{},"body":{"contributing.html":{}}}],["excited",{"_index":381,"title":{},"body":{"contributing.html":{}}}],["execute",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["executioncontext",{"_index":198,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explicit",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["export",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":578,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":201,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["feature",{"_index":448,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":413,"title":{},"body":{"contributing.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files",{"_index":641,"title":{},"body":{"license.html":{}}}],["find",{"_index":301,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"contributing.html":{}}}],["findonebyid",{"_index":325,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":326,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["fine",{"_index":453,"title":{},"body":{"contributing.html":{}}}],["fitness",{"_index":675,"title":{},"body":{"license.html":{}}}],["follow",{"_index":439,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":660,"title":{},"body":{"license.html":{}}}],["foot",{"_index":388,"title":{},"body":{"contributing.html":{}}}],["forever",{"_index":433,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foundation",{"_index":536,"title":{},"body":{"contributing.html":{}}}],["free",{"_index":635,"title":{},"body":{"license.html":{}}}],["freenode",{"_index":377,"title":{},"body":{"contributing.html":{}}}],["fruition",{"_index":372,"title":{},"body":{"contributing.html":{}}}],["function",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":623,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":658,"title":{},"body":{"license.html":{}}}],["generators",{"_index":481,"title":{},"body":{"contributing.html":{}}}],["getdata",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":236,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":242,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":196,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":197,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":357,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":457,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":424,"title":{},"body":{"contributing.html":{}}}],["glad",{"_index":363,"title":{},"body":{"contributing.html":{}}}],["goal",{"_index":508,"title":{},"body":{"contributing.html":{}}}],["going",{"_index":391,"title":{},"body":{"contributing.html":{}}}],["gqlauthguard",{"_index":189,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":193,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":204,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["granted",{"_index":634,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":314,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":191,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:15",{"_index":199,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":313,"title":{},"body":{"classes/UserResolver.html":{}}}],["haml",{"_index":476,"title":{},"body":{"contributing.html":{}}}],["handful",{"_index":411,"title":{},"body":{"contributing.html":{}}}],["hang",{"_index":467,"title":{},"body":{"contributing.html":{}}}],["hash",{"_index":241,"title":{},"body":{"injectables/PasswordService.html":{},"contributing.html":{}}}],["hash(password",{"_index":253,"title":{},"body":{"injectables/PasswordService.html":{}}}],["haven't",{"_index":373,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":369,"title":{},"body":{"contributing.html":{}}}],["helpers",{"_index":482,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":382,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":633,"title":{},"body":{"license.html":{}}}],["holders",{"_index":681,"title":{},"body":{"license.html":{}}}],["hours",{"_index":409,"title":{},"body":{"contributing.html":{}}}],["html",{"_index":480,"title":{},"body":{"contributing.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":252,"title":{},"body":{"injectables/PasswordService.html":{}}}],["i'm",{"_index":361,"title":{},"body":{"contributing.html":{}}}],["id",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":280,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":525,"title":{},"body":{"contributing.html":{}}}],["image_path",{"_index":516,"title":{},"body":{"contributing.html":{}}}],["image_tag",{"_index":517,"title":{},"body":{"contributing.html":{}}}],["images",{"_index":514,"title":{},"body":{"contributing.html":{}}}],["impact.\"coding",{"_index":464,"title":{},"body":{"contributing.html":{}}}],["implement",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["implements",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{}}}],["implied",{"_index":671,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["important",{"_index":383,"title":{},"body":{"contributing.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":434,"title":{},"body":{"contributing.html":{}}}],["included",{"_index":665,"title":{},"body":{"license.html":{}}}],["including",{"_index":645,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["indent",{"_index":470,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":143,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["instead",{"_index":528,"title":{},"body":{"contributing.html":{}}}],["interaction",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{}}}],["irc",{"_index":375,"title":{},"body":{"contributing.html":{}}}],["isignauthpayload",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":499,"title":{},"body":{"contributing.html":{}}}],["items",{"_index":484,"title":{},"body":{"contributing.html":{}}}],["iuser",{"_index":259,"title":{},"body":{"classes/UserEntity.html":{}}}],["join",{"_index":399,"title":{},"body":{"contributing.html":{}}}],["json",{"_index":606,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":72,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":670,"title":{},"body":{"license.html":{}}}],["kind.string",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":294,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":685,"title":{},"body":{"license.html":{}}}],["liable",{"_index":682,"title":{},"body":{"license.html":{}}}],["lib",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{}}}],["license",{"_index":626,"title":{"license.html":{}},"body":{"license.html":{}}}],["lighthouse",{"_index":402,"title":{},"body":{"contributing.html":{}}}],["limitation",{"_index":646,"title":{},"body":{"license.html":{}}}],["limited",{"_index":672,"title":{},"body":{"license.html":{}}}],["line",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{},"contributing.html":{}}}],["list",{"_index":398,"title":{},"body":{"contributing.html":{}}}],["log",{"_index":451,"title":{},"body":{"contributing.html":{}}}],["logic",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"contributing.html":{}}}],["login",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(signinpayload",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{}}}],["look",{"_index":456,"title":{},"body":{"contributing.html":{}}}],["love",{"_index":432,"title":{},"body":{"contributing.html":{}}}],["m",{"_index":458,"title":{},"body":{"contributing.html":{}}}],["mail",{"_index":273,"title":{},"body":{"classes/UserEntity.html":{}}}],["mailing",{"_index":397,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":443,"title":{},"body":{"contributing.html":{}}}],["management",{"_index":395,"title":{},"body":{"contributing.html":{}}}],["matching",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":674,"title":{},"body":{"license.html":{}}}],["merge",{"_index":649,"title":{},"body":{"license.html":{}}}],["message",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"contributing.html":{}}}],["messages",{"_index":452,"title":{},"body":{"contributing.html":{}}}],["metadata",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":485,"title":{},"body":{"contributing.html":{}}}],["methods",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":622,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":627,"title":{},"body":{"license.html":{}}}],["modify",{"_index":648,"title":{},"body":{"license.html":{}}}],["module",{"_index":30,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":32,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":430,"title":{},"body":{"contributing.html":{}}}],["name",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":274,"title":{},"body":{"classes/UserEntity.html":{}}}],["need",{"_index":366,"title":{},"body":{"contributing.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["never",{"_index":519,"title":{},"body":{"contributing.html":{}}}],["new",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ng",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["ngrx/component",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["nice",{"_index":498,"title":{},"body":{"contributing.html":{}}}],["nickname",{"_index":262,"title":{},"body":{"classes/UserEntity.html":{}}}],["noninfringement",{"_index":678,"title":{},"body":{"license.html":{}}}],["notice",{"_index":663,"title":{},"body":{"license.html":{}}}],["nrwl/angular",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":244,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["object",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":638,"title":{},"body":{"license.html":{}}}],["one",{"_index":447,"title":{},"body":{"contributing.html":{}}}],["open",{"_index":494,"title":{},"body":{"contributing.html":{}}}],["opengovernment",{"_index":376,"title":{},"body":{"contributing.html":{}}}],["operators",{"_index":490,"title":{},"body":{"contributing.html":{}}}],["optimize",{"_index":468,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":690,"title":{},"body":{"license.html":{}}}],["out",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":697,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":554,"title":{"dependencies.html":{}},"body":{}}],["paragraph",{"_index":461,"title":{},"body":{"contributing.html":{}}}],["param",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"contributing.html":{}}}],["parseliteral(ast",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":331,"title":{},"body":{"injectables/UserService.html":{}}}],["participatory",{"_index":534,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":676,"title":{},"body":{"license.html":{}}}],["pass",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["passengers",{"_index":507,"title":{},"body":{"contributing.html":{}}}],["passport",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":238,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":73,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["paths",{"_index":523,"title":{},"body":{"contributing.html":{}}}],["payload",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["people",{"_index":497,"title":{},"body":{"contributing.html":{}}}],["per",{"_index":449,"title":{},"body":{"contributing.html":{}}}],["perhaps",{"_index":503,"title":{},"body":{"contributing.html":{}}}],["permission",{"_index":632,"title":{},"body":{"license.html":{}}}],["permit",{"_index":656,"title":{},"body":{"license.html":{}}}],["person",{"_index":637,"title":{},"body":{"license.html":{}}}],["persons",{"_index":657,"title":{},"body":{"license.html":{}}}],["pg",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":263,"title":{},"body":{"classes/UserEntity.html":{}}}],["pivotal",{"_index":392,"title":{},"body":{"contributing.html":{}}}],["plain",{"_index":240,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":418,"title":{},"body":{"contributing.html":{}}}],["politics",{"_index":535,"title":{},"body":{"contributing.html":{}}}],["portions",{"_index":667,"title":{},"body":{"license.html":{}}}],["possible",{"_index":511,"title":{},"body":{"contributing.html":{}}}],["prepend",{"_index":520,"title":{},"body":{"contributing.html":{}}}],["present",{"_index":282,"title":{},"body":{"classes/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":278,"title":{},"body":{"classes/UserEntity.html":{}}}],["private",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["project",{"_index":370,"title":{},"body":{"contributing.html":{}}}],["promise",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":233,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provided",{"_index":668,"title":{},"body":{"license.html":{}}}],["providers",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":306,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["public",{"_index":284,"title":{},"body":{"classes/UserEntity.html":{}}}],["publish",{"_index":650,"title":{},"body":{"license.html":{}}}],["pull",{"_index":425,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":677,"title":{},"body":{"license.html":{}}}],["put",{"_index":483,"title":{},"body":{"contributing.html":{}}}],["putting",{"_index":479,"title":{},"body":{"contributing.html":{}}}],["query",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":317,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":304,"title":{},"body":{"classes/UserResolver.html":{}}}],["read",{"_index":429,"title":{},"body":{"contributing.html":{}}}],["readability",{"_index":469,"title":{},"body":{"contributing.html":{}}}],["reading",{"_index":365,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["really",{"_index":362,"title":{},"body":{"contributing.html":{}}}],["referring",{"_index":518,"title":{},"body":{"contributing.html":{}}}],["reflect",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["relative",{"_index":522,"title":{},"body":{"contributing.html":{}}}],["report",{"_index":403,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":328,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":194,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"contributing.html":{}}}],["requests",{"_index":431,"title":{},"body":{"contributing.html":{}}}],["reset",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":316,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolvers",{"_index":355,"title":{},"body":{"modules/UsersModule.html":{}}}],["resources",{"_index":384,"title":{},"body":{"contributing.html":{}}}],["restriction",{"_index":644,"title":{},"body":{"license.html":{}}}],["result",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["ride",{"_index":509,"title":{},"body":{"contributing.html":{}}}],["rights",{"_index":647,"title":{},"body":{"license.html":{}}}],["roadmap",{"_index":386,"title":{},"body":{"contributing.html":{}}}],["root",{"_index":524,"title":{},"body":{"contributing.html":{}}}],["rounds",{"_index":250,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rspec",{"_index":416,"title":{},"body":{"contributing.html":{}}}],["rxjs",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":249,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":234,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":308,"title":{},"body":{"classes/UserResolver.html":{}}}],["secretorkey",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":251,"title":{},"body":{"injectables/PasswordService.html":{}}}],["sell",{"_index":654,"title":{},"body":{"license.html":{}}}],["send",{"_index":423,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":513,"title":{},"body":{"contributing.html":{}}}],["server",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":315,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":275,"title":{},"body":{"classes/UserEntity.html":{}}}],["shall",{"_index":664,"title":{},"body":{"license.html":{}}}],["shared",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{}}}],["signauthresponse",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":135,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["small",{"_index":454,"title":{},"body":{"contributing.html":{}}}],["smooth",{"_index":510,"title":{},"body":{"contributing.html":{}}}],["soft",{"_index":474,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":495,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["sort",{"_index":500,"title":{},"body":{"contributing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{}}}],["space",{"_index":396,"title":{},"body":{"contributing.html":{}}}],["spaces",{"_index":473,"title":{},"body":{"contributing.html":{}}}],["standard",{"_index":207,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["start",{"_index":465,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":358,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":659,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":652,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":421,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":666,"title":{},"body":{"license.html":{}}}],["summary",{"_index":460,"title":{},"body":{"contributing.html":{}}}],["super",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":694,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":444,"title":{},"body":{"contributing.html":{}}}],["svg",{"_index":695,"title":{},"body":{"modules.html":{}}}],["svvs/shared/utils/interfaces",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["table",{"_index":258,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":475,"title":{},"body":{"contributing.html":{}}}],["tashian",{"_index":533,"title":{},"body":{"contributing.html":{}}}],["tells",{"_index":385,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":437,"title":{},"body":{"contributing.html":{}}}],["testbed",{"_index":414,"title":{},"body":{"contributing.html":{}}}],["testing",{"_index":410,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":531,"title":{},"body":{"contributing.html":{}}}],["things",{"_index":380,"title":{},"body":{"contributing.html":{}}}],["this.authservice.login(signinpayload",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":254,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.delete",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":320,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":689,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":393,"title":{},"body":{"contributing.html":{}}}],["translate",{"_index":192,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["true",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["tslib",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":472,"title":{},"body":{"contributing.html":{}}}],["type",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":293,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":356,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":276,"title":{},"body":{"classes/UserEntity.html":{}}}],["unknown",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":289,"title":{},"body":{"classes/UserEntity.html":{}}}],["updated",{"_index":264,"title":{},"body":{"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":287,"title":{},"body":{"classes/UserEntity.html":{}}}],["url('../images/blah.gif",{"_index":530,"title":{},"body":{"contributing.html":{}}}],["url('/images/blah.gif",{"_index":529,"title":{},"body":{"contributing.html":{}}}],["urls",{"_index":526,"title":{},"body":{"contributing.html":{}}}],["use",{"_index":436,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["used",{"_index":283,"title":{},"body":{"classes/UserEntity.html":{}}}],["useguard",{"_index":195,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["useguards",{"_index":309,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":318,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.entity.ts",{"_index":277,"title":{},"body":{"classes/UserEntity.html":{}}}],["user.id",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":52,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":302,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":295,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["users.graphql",{"_index":297,"title":{},"body":{"classes/UserResolver.html":{}}}],["users.length",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users[0",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":149,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":37,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":471,"title":{},"body":{"contributing.html":{}}}],["usually",{"_index":406,"title":{},"body":{"contributing.html":{}}}],["validate",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":246,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":699,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":389,"title":{},"body":{"contributing.html":{}}}],["views",{"_index":477,"title":{},"body":{"contributing.html":{}}}],["volunteer",{"_index":367,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":378,"title":{},"body":{"contributing.html":{}}}],["warranties",{"_index":673,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":669,"title":{},"body":{"license.html":{}}}],["we're",{"_index":390,"title":{},"body":{"contributing.html":{}}}],["welcome",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":686,"title":{},"body":{"license.html":{}}}],["whoiam",{"_index":298,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoiam(@currentuser",{"_index":319,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoiam(user",{"_index":303,"title":{},"body":{"classes/UserResolver.html":{}}}],["without",{"_index":643,"title":{},"body":{"license.html":{}}}],["working",{"_index":379,"title":{},"body":{"contributing.html":{}}}],["write",{"_index":419,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":491,"title":{},"body":{"contributing.html":{}}}],["x+=1",{"_index":492,"title":{},"body":{"contributing.html":{}}}],["you'll",{"_index":466,"title":{},"body":{"contributing.html":{}}}],["you're",{"_index":364,"title":{},"body":{"contributing.html":{}}}],["you've",{"_index":427,"title":{},"body":{"contributing.html":{}}}],["zone.js",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Base controller api app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/app.controller.ts:11\n                \n            \n\n\n            \n                \n                    Return welcome string\n\n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n/**\n * Base controller api app\n */\n@Controller()\nexport class AppController {\n  /**\n   * Return welcome string\n   */\n  @Get()\n  getData() {\n    return { message: 'Welcome to api!' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { AppController } from './app.controller';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { environment } from '../environments/environment';\nimport { resolverMap } from './app.resolver';\nimport { UserEntity } from './users/entities/user.entity';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity],\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({ req }) => ({ req }),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Auth module contain logic of authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { environment } from '../../environments/environment';\n\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './services/auth.service';\nimport { PasswordService } from './services/password.service';\nimport { JwtStrategy } from './services/jwt.strategy';\nimport { AuthResolver } from './resolvers/auth.resolver';\n\n/**\n * Auth module contain logic of authentication\n */\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn,\n      },\n    }),\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResolver execute auth.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/resolvers/auth.resolver.ts:15\n                            \n                        \n\n                \n                    \n                            Inject into AuthResolver: AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                validate user and return SignAuthResponse\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/auth/resolvers/auth.resolver.ts:29\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'login'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from lib shared-data-access-interfaces\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/auth/resolvers/auth.resolver.ts:39\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'logout'\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\n\nimport type {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\n\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * AuthResolver execute auth.graphql query\n */\n@Resolver('Auth')\nexport class AuthResolver {\n  /**\n   * Inject into AuthResolver: AuthService\n   *\n   * @param authService validate user and return SignAuthResponse\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Implement GraphQL Query 'login'\n   *\n   * @param signInPayload from lib shared-data-access-interfaces\n   */\n  @Query('login')\n  async login(\n    @SignIn() signInPayload: ISignAuthPayload\n  ): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  /**\n   * Implement GraphQL Query 'logout'\n   */\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This AuthService validate user and return SignAuthResponse\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Inject into AuthService: JwtService, UserService, PasswordService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with JWT\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with the user entity\n\n                                                        \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with bcrypt and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/auth/services/auth.service.ts:61\n                \n            \n\n\n            \n                \n                    Return SignAuthResponse data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Incoming login data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/auth/services/auth.service.ts:38\n                \n            \n\n\n            \n                \n                    Validate users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\nimport { environment } from '../../../environments/environment';\n\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\nimport { UserEntity } from '../../users/entities/user.entity';\n\n/**\n * This AuthService validate user and return SignAuthResponse\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Inject into AuthService: JwtService, UserService, PasswordService\n   *\n   * @param jwtService Implements interaction with JWT\n   * @param userService Implements interaction with the user entity\n   * @param passwordService Implements interaction with bcrypt and compare password\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  /**\n   * Validate users\n   *\n   * @param username\n   * @param pass\n   */\n  async validateUser(\n    username: string,\n    pass: string\n  ): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n\n    const isValid = user\n      ? await this.passwordService.compareHash(pass, user.password)\n      : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n    return null;\n  }\n\n  /**\n   * Return SignAuthResponse data\n   *\n   * @param signInPayload Incoming login data\n   */\n  async login(signInPayload: ISignAuthPayload): Promise {\n    const user = await this.validateUser(\n      signInPayload.username,\n      signInPayload.password\n    );\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n            \n                Description\n            \n            \n                GqlAuthGuard translate GqlExecutionContext request => UseGuard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/guards/gql.auth-guard.ts:15\n                \n            \n\n\n            \n                \n                    getRequest return ExecutionContext as GqlExecutionContext request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n/**\n * GqlAuthGuard translate GqlExecutionContext request => UseGuard\n *\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  /**\n   * getRequest return ExecutionContext as GqlExecutionContext request\n   *\n   * @param context\n   */\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Implements interaction with standard passport-jwt methods\nand return validate data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/services/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            provide super\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/auth/services/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n                    Return validate data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\n\nimport { environment } from '../../../environments/environment';\n\n/**\n * Implements interaction with standard passport-jwt methods\n * and return validate data\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * provide super\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    });\n  }\n\n  /**\n   * Return validate data\n   * @param payload\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/services/password.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareHash\n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/auth/services/password.service.ts:28\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHash\n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/auth/services/password.service.ts:19\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/auth/services/password.service.ts:13\n                        \n                    \n\n            \n                \n                    Salt rounds\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10;\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds);\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity users provide access to db table users\n\n            \n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    User creation date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    User e-mail\nif necessary - set the value {unique: true} in user.entity.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:20\n                        \n                    \n\n            \n                \n                    User ID unique identifier (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:68\n                        \n                    \n\n            \n                \n                    User nickname (optional)\nIf present used as public username\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    User phone (optional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    User update date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/app/users/entities/user.entity.ts:59\n                        \n                    \n\n            \n                \n                    Username {unique}\nUsed as default username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport type { IUser } from '@svvs/shared/utils/interfaces';\n\n/**\n * Entity users provide access to db table users\n */\n@Entity({ name: 'users' })\nexport class UserEntity implements IUser {\n  /**\n   * User ID unique identifier (autogenerate)\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * User creation date (autogenerate)\n   */\n  @CreateDateColumn()\n  created: string;\n  /**\n   * User update date (autogenerate)\n   */\n  @UpdateDateColumn()\n  updated: string;\n\n  /**\n   * User e-mail\n   *\n   * if necessary - set the value {unique: true} in user.entity.ts\n   *\n   */\n  @Column()\n  email: string;\n\n  /**\n   * User phone (optional)\n   */\n  @Column()\n  phone?: string;\n  /**\n   * User password\n   */\n  @Column()\n  password: string;\n  /**\n   * Username {unique}\n   *\n   * @description\n   *\n   * Used as default username\n   */\n  @Column({ length: 50, unique: true })\n  username: string;\n  /**\n   * User nickname (optional)\n   *\n   * @description\n   *\n   * If present used as public username\n   */\n  @Column()\n  nickname?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/users/resolvers/user.resolvers.ts\n        \n\n\n            \n                Description\n            \n            \n                UserResolver execute users.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoIam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/users/resolvers/user.resolvers.ts:12\n                            \n                        \n\n                \n                    \n                            Inject into UserResolver: UserService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                find user from userRepository\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        whoIam\n                        \n                    \n                \n            \n            \n                \n                    \n                    whoIam(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/users/resolvers/user.resolvers.ts:26\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'user'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides the user as a candidate for search in userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Query, Resolver } from '@nestjs/graphql';\nimport { CurrentUser } from '../decorators/user.decorator';\nimport { UserEntity } from '../entities/user.entity';\nimport { GqlAuthGuard } from '../guards/gql.auth-guard';\nimport { UserService } from '../services/user.service';\n\n/**\n * UserResolver execute users.graphql query\n */\n@Resolver('User')\nexport class UserResolver {\n  /**\n   * Inject into UserResolver: UserService\n   *\n   * @param userService find user from userRepository\n   */\n  constructor(private readonly userService: UserService) {}\n  /**\n   * Implement GraphQL Query 'user'\n   *\n   * @param user provides the user as a candidate for search in userRepository\n   */\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoIam(@CurrentUser() user: UserEntity) {\n    return await this.userService.findOneById(user.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/users/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService find or create user from userRepository\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/users/services/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            Inject into UserService: userRepository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/services/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Create new user into userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides candidate of new user into userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/services/user.service.ts:57\n                \n            \n\n\n            \n                \n                    Delete user by id from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/services/user.service.ts:23\n                \n            \n\n\n            \n                \n                    Find all users from userRepository\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/services/user.service.ts:31\n                \n            \n\n\n            \n                \n                    Find user by id from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/users/services/user.service.ts:39\n                \n            \n\n\n            \n                \n                    Find user by username from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from '../entities/user.entity';\n\n/**\n * UserService find or create user from userRepository\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Inject into UserService: userRepository\n   *\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository\n  ) {}\n  /**\n   * Find all users from userRepository\n   */\n  async find(): Promise {\n    return await this.userRepository.find();\n  }\n  /**\n   * Find user by id from userRepository\n   *\n   * @param id\n   */\n  async findOneById(id: number): Promise {\n    return (await this.userRepository.findOne(id)) || null;\n  }\n  /**\n   * Find user by username from userRepository\n   *\n   * @param username\n   */\n  async findOneByUserName(username: string): Promise {\n    const users = await this.userRepository.find({ username });\n    return users.length === 1 ? users[0] : null;\n  }\n  /**\n   * Create new user into userRepository\n   *\n   * @param user provides candidate of new user into userRepository\n   */\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user);\n    return this.userRepository.save(newUser);\n  }\n  /**\n   * Delete user by id from userRepository\n   *\n   * @param id\n   */\n  async deleteUserById(id: number): Promise {\n    this.userRepository.delete({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            User module contain logic user entity\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\nimport { UserResolver } from './resolvers/user.resolvers';\nimport { UserService } from './services/user.service';\n/**\n * User module contain logic user entity\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UserService, UserResolver],\n  exports: [UserService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to contribute\nI'm really glad you're reading this, because we need volunteer developers to help this project come to fruition.\nIf you haven't already, come find us in IRC (#opengovernment on freenode). We want you working on things you're excited about.\nHere are some important resources:\n\nOpenGovernment for Developers tells you where we are,\nOur roadmap is the 10k foot view of where we're going, and\nPivotal Tracker is our day-to-day project management space.\nMailing list: Join our developer list\nBugs? Lighthouse is where to report them\nIRC: chat.freenode.net channel #opengovernment. We're usually there during business hours.\n\nTesting\nWe have a handful of Cucumber features, but most of our testbed consists of RSpec examples. Please write RSpec examples for new code you create.\nSubmitting changes\nPlease send a GitHub Pull Request to opengovernment with a clear list of what you've done (read more about pull requests). When you send a pull request, we will love you forever if you include RSpec examples. We can always use more test coverage. Please follow our coding conventions (below) and make sure all of your commits are atomic (one feature per commit).\nAlways write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:\n$ git commit -m \"A brief summary of the commit\n> \n> A paragraph describing what changed and its impact.\"Coding conventions\nStart reading our code and you'll get the hang of it. We optimize for readability:\n\nWe indent using two spaces (soft tabs)\nWe use HAML for all views\nWe avoid logic in views, putting HTML generators into helpers\nWe ALWAYS put spaces after list items and method parameters ([1, 2, 3], not [1,2,3]), around operators (x += 1, not x+=1), and around hash arrows.\nThis is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.\nSo that we can consistently serve images from the CDN, always use image_path or image_tag when referring to images. Never prepend \"/images/\" when using image_path or image_tag.\nAlso for the CDN, always use cwd-relative paths rather than root-relative paths in image URLs in any CSS. So instead of url('/images/blah.gif'), use url('../images/blah.gif').\n\nThanks,\nCarl Tashian, Participatory Politics Foundation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app/users/resolvers/user.resolvers.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^12.1.0\n        \n            @angular/cdk : ^12.1.0\n        \n            @angular/common : ^12.0.0\n        \n            @angular/compiler : ^12.0.0\n        \n            @angular/core : ^12.0.0\n        \n            @angular/forms : ^12.0.0\n        \n            @angular/localize : ^12.0.0\n        \n            @angular/material : ^12.1.0\n        \n            @angular/platform-browser : ^12.0.0\n        \n            @angular/platform-browser-dynamic : ^12.0.0\n        \n            @angular/platform-server : ^12.0.0\n        \n            @angular/router : ^12.0.0\n        \n            @apollo/client : ^3.3.21\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.11.0\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.6\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @ng-bootstrap/ng-bootstrap : ^9.1.3\n        \n            @ngrx/component-store : ^12.0.0\n        \n            @ngrx/effects : ^12.2.0\n        \n            @ngrx/entity : ^12.0.0\n        \n            @ngrx/router-store : ^12.2.0\n        \n            @ngrx/store : ^12.2.0\n        \n            @nguniversal/express-engine : 12.0.2\n        \n            @nrwl/angular : 12.4.0\n        \n            apollo-angular : ^2.6.0\n        \n            apollo-server-express : ^2.25.2\n        \n            bcrypt : ^5.0.1\n        \n            bootstrap : ^5.0.0-beta3\n        \n            express : ^4.15.2\n        \n            graphql : ^15.5.1\n        \n            graphql-tools : ^7.0.5\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.34\n        \n            zone.js : ~0.11.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Bootstrap backend-api app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nГлавная страница документация api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 bongoman-by\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    return ctx;\n  }\n)\n                    \n                \n\n            \n                \n                    Extract context from ExecutionContext\n\n                \n            \n\n        \n    \n\n    apps/api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString(); // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value); // Value from the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value); // ast value is always in string format\n      }\n      return null;\n    },\n  }),\n  JSON: GraphQLJSON,\n}\n                    \n                \n\n            \n                \n                    Resolve scalar type Date & JSON\n\n                \n            \n\n        \n    \n\n    apps/api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const args = ctx.getArgs()[1];\n    return { username: args.username, password: args.password };\n  }\n)\n                    \n                \n\n            \n                \n                    extracts username and password from ExecutionContext\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
